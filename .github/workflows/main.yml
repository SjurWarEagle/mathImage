# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven
concurrency:
  group: ${{ github.workflow }}
  
on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: actions/checkout@v3
      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
          cache: maven
      - name: Build server
        working-directory: server
        run: mvn -U -B test package --file pom.xml

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Client Install dependencies
        working-directory: client
        run: npm install
 
      - name: Client 1
        run: cat src/environments/environment.ts
        working-directory: client
        
      - name: Client update BuildInfo
        run: npm run updateBuildInfo -- $(date +"%Y%m%d-%H%M%S") "prod"
        working-directory: client
        
      - name: Client 2
        run: cat src/environments/environment.ts
        working-directory: client
        
      - name: Client Build
        working-directory: client
        run: npm run build:prod
        
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: wareagledocker/math-image:latest
          file: docker/Dockerfile
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
